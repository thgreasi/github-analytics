var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
define(["require", "exports", '../Observable', '../Subscription', '../util/tryCatch', '../util/errorObject'], function (require, exports, Observable_1, Subscription_1, tryCatch_1, errorObject_1) {
    "use strict";
    /**
     * We need this JSDoc comment for affecting ESDoc.
     * @extends {Ignored}
     * @hide true
     */
    var FromEventPatternObservable = (function (_super) {
        __extends(FromEventPatternObservable, _super);
        function FromEventPatternObservable(addHandler, removeHandler, selector) {
            _super.call(this);
            this.addHandler = addHandler;
            this.removeHandler = removeHandler;
            this.selector = selector;
        }
        /**
         * Creates an Observable from an API based on addHandler/removeHandler
         * functions.
         *
         * <span class="informal">Converts any addHandler/removeHandler API to an
         * Observable.</span>
         *
         * <img src="./img/fromEventPattern.png" width="100%">
         *
         * Creates an Observable by using the `addHandler` and `removeHandler`
         * functions to add and remove the handlers, with an optional selector
         * function to project the event arguments to a result. The `addHandler` is
         * called when the output Observable is subscribed, and `removeHandler` is
         * called when the Subscription is unsubscribed.
         *
         * @example <caption>Emits clicks happening on the DOM document</caption>
         * function addClickHandler(handler) {
         *   document.addEventListener('click', handler);
         * }
         *
         * function removeClickHandler(handler) {
         *   document.removeEventListener('click', handler);
         * }
         *
         * var clicks = Rx.Observable.fromEventPattern(
         *   addClickHandler,
         *   removeClickHandler
         * );
         * clicks.subscribe(x => console.log(x));
         *
         * @see {@link from}
         * @see {@link fromEvent}
         *
         * @param {function(handler: Function): any} addHandler A function that takes
         * a `handler` function as argument and attaches it somehow to the actual
         * source of events.
         * @param {function(handler: Function): void} removeHandler A function that
         * takes a `handler` function as argument and removes it in case it was
         * previously attached using `addHandler`.
         * @param {function(...args: any): T} [selector] An optional function to
         * post-process results. It takes the arguments from the event handler and
         * should return a single value.
         * @return {Observable<T>}
         * @static true
         * @name fromEventPattern
         * @owner Observable
         */
        FromEventPatternObservable.create = function (addHandler, removeHandler, selector) {
            return new FromEventPatternObservable(addHandler, removeHandler, selector);
        };
        FromEventPatternObservable.prototype._subscribe = function (subscriber) {
            var addHandler = this.addHandler;
            var removeHandler = this.removeHandler;
            var selector = this.selector;
            var handler = selector ? function (e) {
                var result = tryCatch_1.tryCatch(selector).apply(null, arguments);
                if (result === errorObject_1.errorObject) {
                    subscriber.error(result.e);
                }
                else {
                    subscriber.next(result);
                }
            } : function (e) { subscriber.next(e); };
            var result = tryCatch_1.tryCatch(addHandler)(handler);
            if (result === errorObject_1.errorObject) {
                subscriber.error(result.e);
            }
            subscriber.add(new Subscription_1.Subscription(function () {
                //TODO: determine whether or not to forward to error handler
                removeHandler(handler);
            }));
        };
        return FromEventPatternObservable;
    }(Observable_1.Observable));
    exports.FromEventPatternObservable = FromEventPatternObservable;
});
//# sourceMappingURL=FromEventPatternObservable.js.map